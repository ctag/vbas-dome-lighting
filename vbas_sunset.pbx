/*

0.0  = Red
0.02 = Orange
0.1  = Yellow
0.33 = Green
0.45 = Mint
0.5  = Cyan
0.66 = Blue
0.9  = Violet

*/


/*
 * Variables
 */

enabled = 0 // Is sequence state active? Enabled 0 -> All LEDs off!
running = 0 // Is sequence running? Running 0 -> Sunset frozen!

seconds = 0
delta_acc = 0
duration = 120
random_index = array(pixelCount)
// pixel_h_step = array(pixelCount)
// pixel_h_acc = array(pixelCount)
progress = 0

// Variables to 'cut' the random array into sections that are updated per render pass
dimmer_step = 30
dimmer_low = 0
dimmer_high = dimmer_step

// Variables to control the pixels' 'v'
pixel_v = array(pixelCount)
export var v_accum_max = 0
export var v_accum = 0 // Modifier to slow down v_step toward end
export var v_mod = 0
v_step = 0.001 // Amount by which v decreases each step


/*
 * Utility Functions
 */
 
function calcVaccum() {
  v_accum = 0
  for (i = pixelCount - 1; i > 0; i-=10) {
    v_accum += pixel_v[i]
  }
}


/*
 * UI Functions
 */

export function triggerReset() {
  enabled = 0
  running = 0
}

export function togglePaused(input) {
  running = !input
}

export function triggerBeginSunset(){
  triggerReset()
  enabled = 1
  running = 1
  seconds = 0
  delta_acc = 0
  progress = 0
  // for (i = 0; i < pixelCount; i++) {
  //   pixel_h_step[i] = random(0.002) - 0.001
  //   pixel_h_acc[i] = 0
  // }
  
  // Initialize array of random indexes and array of values
  for (i = pixelCount - 1; i >= 0; i--)
  {
    random_index[i] = i
    pixel_v[(i+140)%630] = 0.9 + (abs(315-i)/315)*0.05
  }
  
  // Randomize indexes
  for (i = pixelCount - 1; i > 0; i--)
  {
    r = random(pixelCount)
    temp = random_index[r]
    random_index[r] = random_index[i]
    random_index[i] = temp
  }
  
  // Set v_accum_max as the denominator for v_accum
  calcVaccum()
  v_accum_max = v_accum
  
}

export function inputNumberDuration(s) {
  duration = s
}

/*
 * Render Functions
 */

export function beforeRender(delta) {
  delta_acc += delta
  while (delta_acc > 1000) {
    delta_acc -= 1000
    seconds += 1
    // for (i = 0; i < pixelCount; i++) {
    //   pixel_h_acc[i] += pixel_h_step[i]
    //   //pixel_h[i] = clamp(pixel_h[i], -0.05, 0.05)
    // }
  }
  
  //progress = ( (seconds / duration) + ((delta_acc/1000)/duration) )
  //t1 = time(.25)
  //t2 = time(.15)
}

export function render(index) {
  if (enabled) {
    if (running) {
      
      //h = 0.06 + pixel_h_acc[index]
      
      //shift = (0.02 * progress)
      //shift = shift * shift
      h = 0.06 //- shift
      //h = 0.06
      //s = 1 - (s * s * s * s * s)/2
      s = 1
      
      //v = clamp(1 - progress, 0, 1)
      v = pixel_v[index]
      // pixel_v[index] -= v_step
      
      // v_mod increases the step size of V early on
      v_mod = (v_accum/v_accum_max)*0.2
      
      // Lower the pixel's 'v' if it is within the dimmer range
      if (random_index[index] >= dimmer_low && random_index[index] < dimmer_high) {
        pixel_v[index] -= (v_step + v_mod )
        if (pixel_v[index] < 0) {
          pixel_v[index] = 0
        }
      }
      
      // Move on to the next chunk at the beginning of each render cycle
      if(index == 0) {
        dimmer_low = dimmer_high
        dimmer_high += dimmer_step
        if (dimmer_low >= pixelCount) {
          dimmer_low = 0
          dimmer_high = dimmer_step
        }
      }
      
    } else { // !running
      rgb(0,0,0)
    }
    
    // Set this pixel's Value
    hsv(h, s, v)
    
    // Calculate new v_accum
    calcVaccum()
    
    // Check if sunset is done
    if (v_accum == 0) {
      doReset = 1
      for (i = pixelCount - 1; i > 0; i--) {
        if (pixel_v[i] > 0) {
          doReset = 0
          break
        }
      }
      if (doReset) {
        triggerReset()
      }
    }
    
  } else {
    triggerBeginSunset()
  }
}



